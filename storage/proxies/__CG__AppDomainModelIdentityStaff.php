<?php

namespace DoctrineProxies\__CG__\App\Domain\Model\Identity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Staff extends \App\Domain\Model\Identity\Staff implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'email', 'staffInGroups', 'staffRoles', 'id', 'firstName', 'lastName', 'gender', 'birthday'];
        }

        return ['__isInitialized__', 'email', 'staffInGroups', 'staffRoles', 'id', 'firstName', 'lastName', 'gender', 'birthday'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Staff $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function updateProfile($firstName, $lastName, $email, \App\Domain\Model\Identity\Gender $gender, $birthday = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateProfile', [$firstName, $lastName, $email, $gender, $birthday]);

        return parent::updateProfile($firstName, $lastName, $email, $gender, $birthday);
    }

    /**
     * {@inheritDoc}
     */
    public function joinGroup(\App\Domain\Model\Identity\Group $group, \App\Domain\Model\Identity\StaffType $type, $start = NULL, $end = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'joinGroup', [$group, $type, $start, $end]);

        return parent::joinGroup($group, $type, $start, $end);
    }

    /**
     * {@inheritDoc}
     */
    public function allStaffGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'allStaffGroups', []);

        return parent::allStaffGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroups', []);

        return parent::getGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveGroups', []);

        return parent::getActiveGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function wasActiveInGroupAt(\App\Domain\Model\Identity\Group $group, \DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'wasActiveInGroupAt', [$group, $date]);

        return parent::wasActiveInGroupAt($group, $date);
    }

    /**
     * {@inheritDoc}
     */
    public function wasActiveInGroupBetween(\App\Domain\Model\Identity\Group $group, \App\Domain\Model\Time\DateRange $dateRange)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'wasActiveInGroupBetween', [$group, $dateRange]);

        return parent::wasActiveInGroupBetween($group, $dateRange);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveRoles', []);

        return parent::getActiveRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function allStaffRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'allStaffRoles', []);

        return parent::allStaffRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function assignRole(\App\Domain\Model\Identity\Role $role, $start = NULL, $end = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'assignRole', [$role, $start, $end]);

        return parent::assignRole($role, $start, $end);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\App\Domain\Model\Identity\Role $role, $end = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role, $end]);

        return parent::removeRole($role, $end);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', []);

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', []);

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayName', []);

        return parent::getDisplayName();
    }

    /**
     * {@inheritDoc}
     */
    public function getGender()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', []);

        return parent::getGender();
    }

    /**
     * {@inheritDoc}
     */
    public function getBirthday()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBirthday', []);

        return parent::getBirthday();
    }

}
