<?php

namespace DoctrineProxies\__CG__\App\Domain\Model\Evaluation;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Evaluation extends \App\Domain\Model\Evaluation\Evaluation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'branchForGroup', 'date', 'title', 'permanent', 'max', 'settings', 'pointResults', 'comprehensiveResults', 'spokenResults', 'multiplechoiceResults', 'feedbackResults'];
        }

        return ['__isInitialized__', 'id', 'branchForGroup', 'date', 'title', 'permanent', 'max', 'settings', 'pointResults', 'comprehensiveResults', 'spokenResults', 'multiplechoiceResults', 'feedbackResults'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Evaluation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getBranchForGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBranchForGroup', []);

        return parent::getBranchForGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function getBranch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBranch', []);

        return parent::getBranch();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroup', []);

        return parent::getGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function getEvaluationType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvaluationType', []);

        return parent::getEvaluationType();
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function isPermanent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPermanent', []);

        return parent::isPermanent();
    }

    /**
     * {@inheritDoc}
     */
    public function getMax()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMax', []);

        return parent::getMax();
    }

    /**
     * {@inheritDoc}
     */
    public function getAverage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAverage', []);

        return parent::getAverage();
    }

    /**
     * {@inheritDoc}
     */
    public function getMedian()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedian', []);

        return parent::getMedian();
    }

    /**
     * {@inheritDoc}
     */
    public function getPointResults()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPointResults', []);

        return parent::getPointResults();
    }

    /**
     * {@inheritDoc}
     */
    public function getComprehensiveResults()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComprehensiveResults', []);

        return parent::getComprehensiveResults();
    }

    /**
     * {@inheritDoc}
     */
    public function getMultiplechoiceResults()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMultiplechoiceResults', []);

        return parent::getMultiplechoiceResults();
    }

    /**
     * {@inheritDoc}
     */
    public function getFeedbackResults()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeedbackResults', []);

        return parent::getFeedbackResults();
    }

    /**
     * {@inheritDoc}
     */
    public function update($title, $branchForGroup, $date, $max, $permanent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$title, $branchForGroup, $date, $max, $permanent]);

        return parent::update($title, $branchForGroup, $date, $max, $permanent);
    }

    /**
     * {@inheritDoc}
     */
    public function setSettings($settings)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSettings', [$settings]);

        return parent::setSettings($settings);
    }

    /**
     * {@inheritDoc}
     */
    public function addPointResult(\App\Domain\Model\Evaluation\PointResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPointResult', [$result]);

        return parent::addPointResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function updatePointResult(\App\Domain\Model\Identity\Student $student, $score, $redicodi)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updatePointResult', [$student, $score, $redicodi]);

        return parent::updatePointResult($student, $score, $redicodi);
    }

    /**
     * {@inheritDoc}
     */
    public function removePointResult($pointResult)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePointResult', [$pointResult]);

        return parent::removePointResult($pointResult);
    }

    /**
     * {@inheritDoc}
     */
    public function addComprehensiveResult(\App\Domain\Model\Evaluation\ComprehensiveResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComprehensiveResult', [$result]);

        return parent::addComprehensiveResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function addSpokenResult(\App\Domain\Model\Evaluation\SpokenResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSpokenResult', [$result]);

        return parent::addSpokenResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function addMultiplechoiceResult(\App\Domain\Model\Evaluation\MultiplechoiceResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMultiplechoiceResult', [$result]);

        return parent::addMultiplechoiceResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function updateMultiplechoiceResult(\App\Domain\Model\Identity\Student $student, $selected)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateMultiplechoiceResult', [$student, $selected]);

        return parent::updateMultiplechoiceResult($student, $selected);
    }

    /**
     * {@inheritDoc}
     */
    public function addFeedbackResult(\App\Domain\Model\Evaluation\FeedbackResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFeedbackResult', [$result]);

        return parent::addFeedbackResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function updateFeedbackResult(\App\Domain\Model\Identity\Student $student, $summary)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateFeedbackResult', [$student, $summary]);

        return parent::updateFeedbackResult($student, $summary);
    }

}
